[build-system]
build-backend = "hatchling.build"
requires = [ "hatch-vcs", "hatchling" ]

[project]
name = "ipaddress-tools"
description = "Additional tools for the ipaddress standard library module"
readme = "README.md"
license = "MIT"
license-files = [ "LICENSE" ]
authors = [
    { name = "Sebastian Wiesinger", email = "sebastian@karotte.org" },
]
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Utilities",
]
dynamic = [ "version" ]
dependencies = [  ]

[dependency-groups]
dev = [
    "mypy>=1.18.2",
    "pytest>=8.4.2",
]

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/ipaddress_tools/_version.py"

[tool.hatch.version.raw-options]
local_scheme = "no-local-version"

[tool.uv.sources]
nnis-client = { index = "nnis-client" }

[[tool.uv.index]]
name = "nnis-client"
url = "https://nnis-repo01vp.noris.net/nexus-shared/repository/nnis-python/simple/"
explicit = true

[tool.ruff]
line-length = 120
extend-exclude = [ "src/*/_version.py" ]

lint.extend-select = [
    "ARG",    # flake8-unused-arguments Unused argument, use "_" or "_something" for unused variables
    "ASYNC",  # flake8-async AsyncIO problems
    "B",      # flake8-bugbear Buggy, wrong code
    "BLE",    # flake8-blind-except Don't catch base exceptions
    "C4",     # flake8-comprehensions Unneccessary comprehension code
    "DTZ",    # flake8-datetimez Datetime mistakes
    "E",      # pycodestyle errors
    "EM",     # flake8-errmsg Bad message strings in exception handling
    "ERA001", # commented-out-code
    "F",      # Pyflakes code smells
    "FA",     # flake8-future-annotations Missing future annotations, needs future-annotations = true to fix
    "FLY002", # flynt Use f-strings instead of static string join
    "FURB",   # refurb Refurbish and upgrade code
    "G",      # flake8-logging-format
    "I",      # isort, Sort/optimize imports
    "ICN",    # flake8-import-conventions
    "INP",    # flake8-no-pep420 Make sure __init__.py files exist
    "ISC",    # flake8-implicit-str-concat
    "LOG",    # flake8-logging
    "PERF",   # perflint, Performance hints
    "PIE",    # flake8-pie Unnecessary code
    "PT",     # flake8-pytest-style Bad style for pytest files
    "PTH",    # fake8-use-pathlib Use pathlib instead of older modules/code
    "Q",      # flake8-quotes Consistent single/double quote style
    "RET",    # flake8-return Unnecessary/bad code on return/raise/loop statements
    "RSE",    # flake8-raise Unneccessary code on raised exceptions
    "RUF",    # ruffs own checks
    "S",      # flake8-bandit Bad/dangerous code
    "SIM",    # flake8-simplify Simplify code
    "SLOT",   # flake8-slots Consistent usage of __slots__
    "T10",    # flake8-debugger Debugging statements in code
    "TC",     # flake8-type-checking
    "TID",    # flake8-tidy-imports
    "UP",     # pyupgrade Upgrade code to newer Python versions
    "W",      # pycodestyle warnings
    "YTT",    # flake8-2020 checks for misuse of sys.version or sys.version_info
]
lint.ignore = [
    "E501",   # Line too long
    "G004",   # Logging statement uses f-string
    "S101",   # Use of assert detected
    "S506",   # Unsafe YAML load (false alarm with custom loader)
    "S603",   # Subprocess call
    "SIM105", # Use contextlib.suppress({exception}) instead of try-except-pass -> slower code
]
lint.flake8-comprehensions.allow-dict-calls-with-keyword-arguments = true
lint.flake8-import-conventions.aliases.datetime = "dt"
lint.flake8-import-conventions.banned-from = [ "datetime" ]
lint.isort.required-imports = [ "from __future__ import annotations" ]
# Enable "FA" rule fixes
lint.future-annotations = true

[tool.pyproject-fmt]
max_supported_python = "3.14"
column_width = 120
indent = 4

[tool.pytest.ini_options]
addopts = "--color=yes"
testpaths = [ "tests" ]

[tool.mypy]
disallow_untyped_defs = true
pretty = true
show_error_codes = true
exclude = [ '^src/[^/]+/_version\.py$' ]

[[tool.mypy.overrides]]
module = [ 'ansible.*' ]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [ 'nnis_client.*' ]
ignore_missing_imports = true
